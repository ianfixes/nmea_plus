#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.8.1
# from Racc grammar file "parser.y".
#

require 'racc/parser.rb'


require 'nmea_plus/nmea_message_factory'
require 'nmea_plus/ais_message_factory'

module NMEAPlus
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 19)

# override racc's on_error so we can have context in our error messages
def on_error(t, val, vstack)
  errcontext = (@ss.pre_match[-10..-1] || @ss.pre_match) +
                @ss.matched + @ss.post_match[0..9]
  line_number = @ss.pre_match.lines.count
  raise ParseError, sprintf("parse error on value %s (%s) " +
                            "on line %s around \"%s\"",
                            val.inspect, token_to_str(t) || '?',
                            line_number, errcontext)
end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     2,     3,     4,     5,     6,     7,     8,     9 ]

racc_action_check = [
     0,     0,     1,     2,     3,     4,     5,     6 ]

racc_action_pointer = [
    -3,     2,    -2,    -1,     5,     4,     5,   nil,   nil,   nil ]

racc_action_default = [
    -3,    -3,    -3,    -3,    -3,    -3,    -3,    10,    -1,    -2 ]

racc_goto_table = [
     1 ]

racc_goto_check = [
     1 ]

racc_goto_pointer = [
   nil,     0 ]

racc_goto_default = [
   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 7, :_reduce_1,
  3, 7, :_reduce_2 ]

racc_reduce_n = 3

racc_shift_n = 10

racc_token_table = {
  false => 0,
  :error => 1,
  :CSUM => 2,
  :CASH => 3,
  :BANG => 4,
  :DATA => 5 }

racc_nt_base = 6

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "CSUM",
  "CASH",
  "BANG",
  "DATA",
  "$start",
  "start" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 8)
  def _reduce_1(val, _values, result)
     result = NMEAPlus::NMEAMessageFactory.create(val[0], val[1], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 9)
  def _reduce_2(val, _values, result)
     result = NMEAPlus::AISMessageFactory.create(val[0], val[1], val[2])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module NMEAPlus
